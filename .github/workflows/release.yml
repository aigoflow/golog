name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output: golog-linux-amd64
            goos: linux
            goarch: amd64
          - os: windows-latest
            output: golog-windows-amd64.exe
            goos: windows
            goarch: amd64
          - os: macos-latest
            output: golog-darwin-amd64
            goos: darwin
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        go build -v -o ${{ matrix.output }} .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output }}
        path: ${{ matrix.output }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          # GoLog Release ${{ github.ref_name }}
          
          ## üöÄ Installation
          
          ### Binary Installation
          Download the appropriate binary for your platform and make it executable:
          
          ```bash
          # Linux/macOS
          chmod +x golog-*
          ./golog-linux-amd64
          
          # Windows
          golog-windows-amd64.exe
          ```
          
          ### Docker
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```
          
          ## üìù Changelog
          [View full changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)

    - name: Upload Release Assets
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs').promises;
          const path = require('path');
          
          const release = ${{ steps.create_release.outputs.upload_url }};
          const artifactsDir = './artifacts';
          
          const files = await fs.readdir(artifactsDir);
          for (const file of files) {
            const filePath = path.join(artifactsDir, file);
            const stats = await fs.stat(filePath);
            if (stats.isDirectory()) {
              const subFiles = await fs.readdir(filePath);
              for (const subFile of subFiles) {
                const subFilePath = path.join(filePath, subFile);
                console.log(`Uploading ${subFilePath}`);
                // Upload logic here
              }
            }
          }

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max