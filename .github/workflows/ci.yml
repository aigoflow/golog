name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Build binary
      run: |
        go build -v .
        ./golog -version || true

    - name: Build Docker image
      run: |
        docker build -t golog:test .
        docker run --rm golog:test ./golog -version || true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Start server
      run: |
        go build .
        ./golog &
        sleep 5

    - name: Run integration tests
      run: |
        chmod +x test_prolog.sh
        ./test_prolog.sh

    - name: Test Docker container
      run: |
        docker build -t golog:test .
        docker run -d -p 8081:8080 --name golog-test golog:test
        sleep 5
        curl -f http://localhost:8081/api/v1/sessions || exit 1
        docker logs golog-test
        docker stop golog-test
        docker rm golog-test